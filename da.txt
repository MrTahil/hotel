  const handleDeleteAccount = async () => {
    try {
      const token = localStorage.getItem('authToken');
      if (!token) {
        throw new Error('Nincs token elmentve! Jelentkezz be újra.');
      }

      const username = localStorage.getItem('username');
      if (!username) {
        throw new Error('Nincs felhasználónév elmentve!');
      }

      const response = await fetch(process.env.REACT_APP_API_BASE_URL + `/UserAccounts/DeleteUserByUsername/${username}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ Password: deletePassword }),
      });

      if (response.status === 401) {
        throw new Error('Token érvénytelen vagy lejárt!');
      }

      if (response.status === 404) {
        throw new Error('Felhasználó nem található!');
      }

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `HTTP hiba! Státusz: ${response.status}`);
      }

      localStorage.removeItem('authToken');
      localStorage.removeItem('username');
      navigate('/');
    } catch (error) {
      console.error('Hiba történt a fiók törlése közben:', error.message);
      setError(error.message);
    }
  };

___________________________________

  const handleAddGuest = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem('authToken');
      if (!token) {
        throw new Error('Nincs token elmentve! Jelentkezz be újra.');
      }

      if (!user?.userId) {
        throw new Error('Felhasználói azonosító nem található!');
      }

      if (!guestData.firstName || !guestData.lastName || !guestData.dateOfBirth) {
        throw new Error('A vezetéknév, keresztnév és születési dátum megadása kötelező!');
      }

      const payload = {
        ...guestData,
        userId: user.userId,
        dateOfBirth: guestData.dateOfBirth ? new Date(guestData.dateOfBirth).toISOString() : null,
      };

      const response = await fetch(process.env.REACT_APP_API_BASE_URL + '/Guests/Addnewguest', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      // Ellenőrizzük a Content-Type-ot
      const contentType = response.headers.get('Content-Type');
      let data;

      if (contentType && contentType.includes('application/json')) {
        data = await response.json(); // Ha JSON, akkor parse-oljuk
      } else {
        data = await response.text(); // Ha nem JSON, akkor szövegként kezeljük
      }

      if (!response.ok) {
        throw new Error(data.message || data || `Hiba a vendég hozzáadása során: ${response.status}`);
      }

      await fetchGuests();
      setShowGuestModal(false);
      setGuestData({
        firstName: '',
        lastName: '',
        email: '',
        phoneNumber: '',
        address: '',
        city: '',
        country: '',
        dateOfBirth: '',
        gender: '',
      });
      setError(null);
      setMessage({ type: 'success', text: typeof data === 'string' ? data : data.message || 'Vendég sikeresen hozzáadva!' });
    } catch (err) {
      console.error('Hiba a vendég hozzáadása közben:', err.message);
      setError(err.message);
      setMessage({ type: 'error', text: err.message });
    }
  };
_______________________
  const handleAddGuest = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem('authToken');
      if (!token) {
        throw new Error('Nincs token elmentve! Jelentkezz be újra.');
      }

      if (!user?.userId) {
        throw new Error('Felhasználói azonosító nem található!');
      }

      if (!guestData.firstName || !guestData.lastName || !guestData.dateOfBirth) {
        throw new Error('A vezetéknév, keresztnév és születési dátum megadása kötelező!');
      }

      const payload = {
        ...guestData,
        userId: user.userId,
        dateOfBirth: guestData.dateOfBirth ? new Date(guestData.dateOfBirth).toISOString() : null,
      };

      const response = await fetch(process.env.REACT_APP_API_BASE_URL + '/Guests/Addnewguest', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      // Ellenőrizzük a Content-Type-ot
      const contentType = response.headers.get('Content-Type');
      let data;

      if (contentType && contentType.includes('application/json')) {
        data = await response.json(); // Ha JSON, akkor parse-oljuk
      } else {
        data = await response.text(); // Ha nem JSON, akkor szövegként kezeljük
      }

      if (!response.ok) {
        throw new Error(data.message || data || `Hiba a vendég hozzáadása során: ${response.status}`);
      }

      await fetchGuests();
      setShowGuestModal(false);
      setGuestData({
        firstName: '',
        lastName: '',
        email: '',
        phoneNumber: '',
        address: '',
        city: '',
        country: '',
        dateOfBirth: '',
        gender: '',
      });
      setError(null);
      setMessage({ type: 'success', text: typeof data === 'string' ? data : data.message || 'Vendég sikeresen hozzáadva!' });
    } catch (err) {
      console.error('Hiba a vendég hozzáadása közben:', err.message);
      setError(err.message);
      setMessage({ type: 'error', text: err.message });
    }
  };
_____________

  const handleDeleteAccount = async () => {
    try {
      const token = localStorage.getItem('authToken');
      if (!token) {
        throw new Error('Nincs token elmentve! Jelentkezz be újra.');
      }

      const username = localStorage.getItem('username');
      if (!username) {
        throw new Error('Nincs felhasználónév elmentve!');
      }

      const response = await fetch(process.env.REACT_APP_API_BASE_URL + `/UserAccounts/DeleteUserByUsername/${username}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ Password: deletePassword }),
      });

      if (response.status === 401) {
        throw new Error('Token érvénytelen vagy lejárt!');
      }

      if (response.status === 404) {
        throw new Error('Felhasználó nem található!');
      }

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `HTTP hiba! Státusz: ${response.status}`);
      }

      localStorage.removeItem('authToken');
      localStorage.removeItem('username');
      navigate('/');
    } catch (error) {
      console.error('Hiba történt a fiók törlése közben:', error.message);
      setError(error.message);
    }
  };
_____________
  const handleEditGuest = (guest) => {
    setGuestData({
      firstName: guest.firstName,
      lastName: guest.lastName,
      email: guest.email || '',
      phoneNumber: guest.phoneNumber || '',
      address: guest.address || '',
      city: guest.city || '',
      country: guest.country || '',
      dateOfBirth: guest.dateOfBirth ? new Date(guest.dateOfBirth).toISOString().split('T')[0] : '',
      gender: guest.gender || '',
    });
    setEditGuestId(guest.guestId);
    setShowGuestModal(true);
  };

______________
  const handleUpdateGuest = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem('authToken');
      if (!token) {
        throw new Error('Nincs token elmentve! Jelentkezz be újra.');
      }

      if (!editGuestId) {
        throw new Error('Nincs kiválasztott vendég a szerkesztéshez!');
      }

      const payload = {
        ...guestData,
        dateOfBirth: guestData.dateOfBirth ? new Date(guestData.dateOfBirth).toISOString() : null,
      };

      const response = await fetch(process.env.REACT_APP_API_BASE_URL + `/Guests/UpdateGuest/${editGuestId}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const responseData = await response.json();

      if (!response.ok) {
        throw new Error(responseData.message || `Hiba a vendég módosítása során: ${response.status}`);
      }

      await fetchGuests();
      setShowGuestModal(false);
      setGuestData({
        firstName: '',
        lastName: '',
        email: '',
        phoneNumber: '',
        address: '',
        city: '',
        country: '',
        dateOfBirth: '',
        gender: '',
      });
      setEditGuestId(null);
      setError(null);
      setMessage({ type: 'success', text: responseData.message || 'Vendég sikeresen módosítva!' });
    } catch (err) {
      console.error('Hiba a vendég módosítása közben:', err.message);
      setError(err.message);
      setMessage({ type: 'error', text: err.message });
    }
  };